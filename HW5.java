// Создать словарь HashMap. Обобщение <Integer, String>.
// Заполнить тремя ключами (индекс, цвет), добавить ключь, если не было!)
// Изменить значения дописав восклицательные знаки. 
// *Создать TreeMap, заполнить аналогично.
// *Увеличить количество элементов таблиц до 1000 случайными ключами и общей строкой.
// **Сравнить время прямого и случайного перебора тысячи элементов словарей.

import java.security.Key;
import java.util.*;

public class HW5 {
    private static final Integer Key = null;

    public static void main(String[] args) {
            //1. Создать словарь HashMap. Обобщение <Integer, String>.
            // Заполнить тремя ключами (индекс, цвет), добавить ключь, если не было!)
            // Изменить значения дописав восклицательные знаки. 
   Map<Integer, String> Jornal = new HashMap<>();
   Jornal.put( 1, "Иванов Иван Иваныч") ;
   Jornal.put(2, "Петров Петр Петрович");
   Jornal.put( 3, "Ильин Илья Иваныч");
   Jornal.put( 4, "Иванова Дарья Ивановна");
   Jornal.put( 5, "Сергеев Сергей Иваныч");
   Jornal.put( 1, "Копытько Наталья Петровна");
   System.out.println(Jornal);
   for(int i:Jornal.keySet()){  // заводим цикл для всей элементов int и возвращаем множество ключей 
    Jornal.compute(i,(k, v) -> v = v + "!");  
    // Метод compute() будет вызывать лямбда-выражение внутри себя, передавая ключевой объект и любое значение, 
    // сохраненное в Map для этого ключевого объекта, в качестве параметров лямбда-выражения.
    // Какое бы значение не возвращалось лямбда-выражением, оно сохраняется вместо текущего значения этого ключа.Если
    //  лямбда-выражение возвращает ноль, запись удаляется. Там не будет ключа -> нулевое отображение хранится на карте.
    // Если лямбда-выражение выдает исключение, запись также удаляется.
   }
   System.out.println(Jornal);
    }

   
   
}
